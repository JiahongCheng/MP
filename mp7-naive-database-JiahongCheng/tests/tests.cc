// clang-format off
/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
//  Written By : Student Name                    Environment : ubuntu:bionic               //
//  Date ......: 2022/10/13                      Compiler ...: clang-14                  //
/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
// clang-format on
/////////////////////////////////////////////////////////////////////////////////////////////
//                             Framework Set-up //
/////////////////////////////////////////////////////////////////////////////////////////////
#ifndef CATCH_CONFIG_MAIN
#  define CATCH_CONFIG_MAIN
#endif
#include <catch/catch.hpp>

/////////////////////////////////////////////////////////////////////////////////////////////
//                                 Includes //
/////////////////////////////////////////////////////////////////////////////////////////////
#include <stdexcept>

#include "db_table.hpp"
#include "db.hpp"


/////////////////////////////////////////////////////////////////////////////////////////////
//                             Helpers/Constants //
/////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////
//                                Test Cases //
/////////////////////////////////////////////////////////////////////////////////////////////

TEST_CASE("True == True", "") { REQUIRE(true == true); }

/////////////////////////////////////////////////////////////////////////////////////////////


// void DbTable::DeleteColumnByIdx(unsigned int col_idx) {
//   // Check if the column index is valid
//   if (col_idx >= col_descs_.size()) {
//     throw std::out_of_range("Out Range");
//   }
//   // Check if the table has only one column
//   if (col_descs_.size() == 1 && !rows_.empty()) {
//     throw std::runtime_error("Run time");
//   }
//   // Loop through all rows and delete the data in the specified column
//   for (auto& [id, row] : rows_) {
//     delete static_cast<char*>(row[col_idx]);
//     // Shift the data in the remaining columns left
//     for (unsigned int i = col_idx; i < col_descs_.size() - 1; ++i) {
//       row[i] = row[i + 1];
//     }
//     // Set the last column to null
//     row[col_descs_.size() - 1] = nullptr;
//   }
//   // Remove the column descriptor at the specified index
//   col_descs_.erase(col_descs_.begin() + col_idx);
// }